---
description: 
globs: 
alwaysApply: false
---
# Project Overview

This is a Next.js 13+ (App Router) application using Firebase for backend services.

## Key Technologies:

*   **Frontend:** Next.js (React) with TypeScript
*   **Styling:** Chakra UI (likely, based on past conversations)
*   **Authentication:** Firebase Authentication
*   **Database:** Cloud Firestore
*   **Local Development:** Firebase Emulators Suite (Auth, Firestore, Hosting)
*   **Deployment:** Intended for Firebase Hosting (likely with Cloud Run for the Next.js backend)

## Core Directories and Files:
*   **`app/`**: Contains Next.js App Router pages and API routes.
    *   `app/auth/signin/page.tsx`: User sign-in page.
    *   `app/auth/signup/page.tsx`: User sign-up page.
    *   `app/api/users/route.ts`: API route for managing user data in Firestore (e.g., creating user documents after sign-up).
    *   `app/api/orders/route.ts`: API routes for managing orders (CRUD operations).
*   **`components/`**: Reusable React components.
    *   `components/layout/Header.tsx`: Application header, likely handles sign-out and displays user state.
    *   `components/orders/OrderForm.tsx`: Form for creating/editing orders.
    *   `components/orders/OrderList.tsx`: Component to display a list of orders.
    *   `components/orders/OrderDetails.tsx`: Component to display details of a single order.
*   **`lib/`**: Utility modules and Firebase SDK initializations.
    *   `lib/firebaseClient.ts`: Firebase client SDK setup (for frontend usage, connects to Auth and Firestore).
    *   `lib/firebaseAdmin.ts`: Firebase Admin SDK setup (for backend usage, server-side operations).
*   **`context/`**: React Context API implementations.
    *   `context/AuthContext.tsx`: Provides authentication state and user information throughout the application.
*   **Configuration Files:**
    *   `.env.local`: Environment variables for Firebase configuration (API keys, project ID, service account details for admin).
    *   `firebase.json`: Configuration for Firebase CLI, including emulator settings and hosting rules.
    *   `firestore.rules`: Security rules for Cloud Firestore.
    *   `tsconfig.json` / `jsconfig.json`: TypeScript/JavaScript project configuration, including path aliases like `@/*`.

## Authentication Flow:

1.  Frontend components (e.g., `app/auth/signup/page.tsx`, `app/auth/signin/page.tsx`) use `firebaseClient` to interact with Firebase Authentication.
2.  Upon successful sign-up/sign-in, an ID token is obtained.
3.  For authenticated API requests (e.g., to `app/api/orders/route.ts` or `app/api/users/route.ts`), this ID token is sent in the `Authorization: Bearer <token>` header.
4.  Backend API routes use `firebaseAdmin` to verify the ID token and authorize requests.
5.  Firestore security rules (`firestore.rules`) also use `request.auth` to protect data access.

## Data Models (Conceptual for Firestore):

*   **Users Collection (`users`):**
    *   Document ID: User UID from Firebase Authentication.
    *   Fields: `email`, `displayName`, `role` (e.g., 'user', 'staff', 'admin'), etc.
*   **Orders Collection (`orders`):**
    *   Fields: `itemName`, `quantity`, `status`, `requestedBy` (User UID or reference to user document), `createdAt`, `updatedAt`, etc.
    *   Potentially a `comments` subcollection for each order.
